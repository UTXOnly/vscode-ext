{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Postgres Integration Configuration",
  "type": "object",
  "properties": {
    "init_config": {
      "type": "object",
      "properties": {
        "propagate_agent_tags": {
          "type": "boolean",
          "default": false,
          "description": "Set to `true` to propagate the tags from `datadog.yaml` and the agent host tags to the check.\nWhen set to `true`, the tags from the agent host are added to the check's tags for all instances."
        },
        "min_collection_interval": {
          "type": "integer",
          "description": "Minimum collection interval in seconds",
          "default": 15
        }
      },
      "description": "Initial configuration for the integration"
    },
    "instances": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "default": "localhost",
            "description": "The hostname to connect to. To connect to a Unix socket, specify the full path to the socket file,\ne.g. `/var/run/postgresql/.s.PGSQL.5432`."
          },
          "port": {
            "type": "integer",
            "default": 5432,
            "description": "The port to use when connecting to PostgreSQL."
          },
          "username": {
            "type": "string",
            "default": "datadog",
            "description": "The Datadog username created to connect to PostgreSQL."
          },
          "password": {
            "type": "string",
            "description": "The password associated with the Datadog user."
          },
          "dbname": {
            "type": "string",
            "default": "postgres",
            "description": "The name of the PostgresSQL database to monitor.\nNote: If omitted, the default system Postgres database is queried."
          },
          "reported_hostname": {
            "type": "string",
            "description": "Set the reported hostname for this instance. This value overrides the hostname detected by the Agent\nand can be useful to set a custom hostname when connecting to a remote database through a proxy."
          },
          "exclude_hostname": {
            "type": "boolean",
            "default": false,
            "description": "Omit the hostname from tags and events. This is useful when the database host is not monitored by an agent."
          },
          "dbstrict": {
            "type": "boolean",
            "default": false,
            "description": "Whether to restrict the scope of the check to just the database in question.\nSet to `true` if you only want to gather metrics from the database provided in the dbname parameter."
          },
          "ignore_databases": {
            "type": "array",
            "default": [
              "template0",
              "template1",
              "rdsadmin",
              "azure_maintenance",
              "cloudsqladmin",
              "alloydbadmin",
              "alloydbmetadata"
            ],
            "items": {
              "type": "string"
            },
            "description": "A list of database to ignore. No metrics or statement samples will be collected for these databases.\nEach value can be a plain string or a Postgres pattern. If you want to ignore the postgres database,\nset collect_default_database to false in addition to adding it to this array.\nFor more information on how patterns work, see https://www.postgresql.org/docs/12/functions-matching.html"
          },
          "ignore_schemas_owned_by": {
            "type": "array",
            "default": [
              "rds_superuser",
              "rdsadmin",
              "user123",
              "dev_%_owner"
            ],
            "items": {
              "type": "string"
            },
            "description": "A list of database users which own schemas to ignore.\nNo metrics or statement samples will be collected for these schemas.\nEach value can be a plain string or a Postgres pattern."
          },
          "ssl": {
            "type": "string",
            "default": "allow",
            "description": "This option determines whether or not and with what priority a secure SSL TCP/IP connection\nis negotiated with the server. There are six modes:\n- `disable`: Only tries a non-SSL connection.\n- `allow`: First tries a non-SSL connection; if if fails, tries an SSL connection.\n- `prefer`: First tries an SSL connection; if it fails, tries a non-SSL connection.\n- `require`: Only tries an SSL connection. If a root CA file is present, verifies the certificate in\n             the same way as if verify-ca was specified.\n- `verify-ca`: Only tries an SSL connection, and verifies that the server certificate is issued by a\n               trusted certificate authority (CA).\n- `verify-full`: Only tries an SSL connection and verifies that the server certificate is issued by a\n                 trusted CA and that the requested server host name matches the one in the certificate.\n\nFor a detailed description of how these options work see https://www.postgresql.org/docs/current/libpq-ssl.html"
          },
          "ssl_root_cert": {
            "type": "string",
            "description": "The path to the ssl root certificate.\n\nFor a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html"
          },
          "ssl_cert": {
            "type": "string",
            "description": "The path to the ssl certificate.\n\nFor a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html"
          },
          "ssl_key": {
            "type": "string",
            "description": "The path to the ssl client key.\n\nFor a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html"
          },
          "ssl_password": {
            "type": "string",
            "description": "The password for the secret key specified in ssl_key, allowing client certificate private keys to be stored\nin encrypted form on disk.\n\nFor a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html"
          },
          "query_timeout": {
            "type": "integer",
            "default": 5000,
            "description": "Adds a statement_timeout https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-STATEMENT-TIMEOUT\nto all metric collection queries. Aborts any statement that takes more than the specified number of milliseconds,\nstarting from the time the command arrives at the server from the client. A value of zero turns this off.\nCancelled queries won't log any metrics."
          },
          "idle_connection_timeout": {
            "type": "integer",
            "default": 60000,
            "description": "Sets the timeout (in ms) a connection used in the connection pool will be idle until it is closed by the pooler.\nThis value should be configured to a lower value if you are observing connection buildup on the Postgres server,\nor a higher value if connections are getting prematurely closed."
          },
          "max_connections": {
            "type": "integer",
            "default": 30,
            "description": "Sets the upper bound limit on the number of concurrent connections the Agent can have on the database server.\nThe Agent needs to open additional connections to collect explain plans across databases.\nIdle connections are cached, but pruned over time to balance the performance impact of opening connections and the cost of having many open connections.\nRaising the default value should only be needed on workloads with >50 databases.\nLowering the default value can reduce the number of explain plans collected and is not recommended in most cases."
          },
          "relations": {
            "type": "array",
            "default": [
              {
                "relation_name": "<TABLE_NAME>",
                "schemas": [
                  "<SCHEMA_NAME1>"
                ]
              },
              {
                "relation_regex": "<TABLE_PATTERN>",
                "relkind": [
                  "r",
                  "p"
                ]
              }
            ],
            "items": {},
            "description": "The list of relations/tables must be specified here to track per-relation (table, index , view, etc.) metrics.\nIf enabled, `dbname` should be specified to collect database-specific relations metrics.\nYou can either specify a single relation by its exact name in 'relation_name' or use a regex to track metrics\nfrom all matching relations (useful in cases where relation names are dynamically generated, e.g. TimescaleDB).\nEach relation generates many metrics (10 + 10 per index).\n\nBy default all schemas are included. To track relations from specific schemas only,\nyou can specify the `schemas` attribute and provide a list of schemas to use for filtering.\n\nSize metrics are collected only for ordinary tables. Index metrics are collected only for user indexes. Lock\nmetrics are collected for all relation types (table, index , view, etc.). The rest of the metrics are\ncollected only for user tables.\nTo track lock metrics for relations of a specific kind only, specify the `relkind` attribute\nas a list of the options:\n* r = ordinary table\n* i = index\n* S = sequence\n* t = TOAST table\n* m = materialized view\n* c = composite type\n* f = foreign table\n* p = partitioned table\n\nNote: For compatibility reasons you can also use the following syntax to track relations metrics by specifying\nthe list of table names. All schemas are included.\nrelations:"
          },
          "max_relations": {
            "type": "integer",
            "default": 300,
            "description": "Determines the maximum number of relations to fetch."
          },
          "collect_function_metrics": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, collects metrics regarding PL/pgSQL functions from pg_stat_user_functions."
          },
          "collect_count_metrics": {
            "type": "boolean",
            "default": true,
            "description": "Collect count of user tables from pg_class."
          },
          "collect_checksum_metrics": {
            "type": "boolean",
            "default": false,
            "description": "Collect counts of database failed checksums. Only supported on versions >= 12."
          },
          "collect_activity_metrics": {
            "type": "boolean",
            "default": false,
            "description": "Collect metrics regarding transactions from pg_stat_activity. Please make sure the user\nhas sufficient privileges to read from pg_stat_activity before enabling this option."
          },
          "activity_metrics_excluded_aggregations": {
            "type": "array",
            "default": [
              "application_name"
            ],
            "items": {
              "type": "string"
            },
            "description": "A list of columns to remove from the pg_stat_activity aggregation.\nBy default, datname, usename and application_name will be used.\nIf applications with different application_name are creating a lot of short-lived queries,\nremoving application_name from the aggregation can help generate more stable metrics.\nNote that datname is a required aggregation on activity metrics and can't be excluded."
          },
          "collect_buffercache_metrics": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, collects metrics regarding buffer cache usage from pg_buffercache.\npg_buffercache extension must be installed."
          },
          "collect_database_size_metrics": {
            "type": "boolean",
            "default": true,
            "description": "Collect database size metrics."
          },
          "collect_default_database": {
            "type": "boolean",
            "default": true,
            "description": "Include statistics from the default database 'postgres' in the check metrics."
          },
          "collect_bloat_metrics": {
            "type": "boolean",
            "default": false,
            "description": "Collect metrics about table bloat. Only available when `relation` metrics are enabled."
          },
          "collect_wal_metrics": {
            "type": "boolean",
            "default": false,
            "description": "Collect metrics about WAL file age.\nNOTE:\nFor Postgres 9.6 and below, you must run the check local to your database if you want to enable this option.\nStarting Postgres 10, WAL file metrics are enabled by default using `pg_ls_waldir` and don't need local access."
          },
          "data_directory": {
            "type": "string",
            "default": "/usr/local/pgsql/data",
            "description": "The data directory of your postgres installation\nRequired when collecting WAL metrics."
          },
          "tag_replication_role": {
            "type": "boolean",
            "default": true,
            "description": "Tag metrics and checks with `replication_role:<master|standby>`."
          },
          "table_count_limit": {
            "type": "integer",
            "default": 200,
            "description": "The maximum number of tables to collect metrics from."
          },
          "application_name": {
            "type": "string",
            "default": "datadog-agent",
            "description": "The application_name can be any string of less than NAMEDATALEN characters (64 characters in a standard build).\nIt is typically set by an application upon connection to the server.\nThe name is displayed in the pg_stat_activity view and included in CSV log entries."
          },
          "dbm": {
            "type": "boolean",
            "default": false,
            "description": "Set to `true` to enable Database Monitoring."
          },
          "pg_stat_statements_view": {
            "type": "string",
            "default": "pg_stat_statements",
            "description": "Set this value if you want to define a custom view or function to allow the datadog user to query the\n`pg_stat_statements` table, which is useful for restricting the permissions given to the datadog agent.\nPlease note this is an ALPHA feature and is subject to change or deprecation without notice."
          },
          "query_encodings": {
            "type": "array",
            "default": [
              "utf8",
              "latin1"
            ],
            "items": {
              "type": "string"
            },
            "description": "Set this value if your database is encoded in SQL_ASCII and you have clients that use encodings other than UTF-8.\nWhen attempting to decode stored query text for query metrics, samples and activity, the agent will use these\nvalues in order and return the first successful decoding. Only supported for Postgres 10 and above.\n\nNote that the values should be the Python versions of the encoding names, which can be referenced at:\nhttps://docs.python.org/3/library/codecs.html#standard-encodings"
          },
          "log_unobfuscated_queries": {
            "type": "boolean",
            "default": false,
            "description": "Set to `true` to enable logging of original unobfuscated SQL queries when obfuscation errors occur.\nFor security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.\nNote: This option only applies when `dbm` is enabled."
          },
          "log_unobfuscated_plans": {
            "type": "boolean",
            "default": false,
            "description": "Set to `true` to enable logging of original unobfuscated SQL plans when obfuscation errors occur.\nFor security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.\nNote: This option only applies when `dbm` is enabled."
          },
          "database_instance_collection_interval": {
            "type": "number",
            "default": false,
            "description": "Set the database instance collection interval (in seconds). The database instance collection sends\nbasic information about the database instance along with a signal that it still exists.\nThis collection does not involve any additional queries to the database."
          },
          "propagate_agent_tags": {
            "type": "boolean",
            "default": false,
            "description": "Set to `true` to propagate the tags from `datadog.yaml` and the agent host tags to the check.\nWhen set to `true`, the tags from the agent host are added to the check's tags for all instances.\nThis option takes precedence over the `propagate_agent_tags` option in `init_config`."
          },
          "disable_generic_tags": {
            "type": "boolean",
            "description": "Disable generic tags to avoid conflicts with other integrations",
            "default": false
          }
        },
        "required": [
          "host",
          "username"
        ]
      },
      "description": "Integration instances configuration"
    },
    "logs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Log type (file, tcp, udp, etc.)"
          },
          "path": {
            "type": "string",
            "description": "Path to log file"
          },
          "source": {
            "type": "string",
            "description": "Log source identifier"
          }
        }
      },
      "description": "Log collection configuration"
    }
  },
  "required": [
    "instances"
  ],
  "additionalProperties": false
}